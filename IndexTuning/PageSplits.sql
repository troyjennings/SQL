-- By Table
DECLARE @FullTableName NVARCHAR(255) = N'dbo.floorplans'

SELECT
IOS.INDEX_ID,
I.type_desc,
O.NAME AS OBJECT_NAME,
I.NAME AS INDEX_NAME,
I.fill_factor AS Fill_Factor,
IPS.avg_page_space_used_in_percent,
IPS.avg_fragmentation_in_percent,
IOS.LEAF_ALLOCATION_COUNT AS PAGE_SPLIT_FOR_INDEX,
IOS.NONLEAF_ALLOCATION_COUNT AS PAGE_ALLOCATION_CAUSED_BY_PAGESPLIT
FROM SYS.DM_DB_INDEX_OPERATIONAL_STATS(DB_ID(),OBJECT_ID(@FullTableName),NULL,NULL) IOS
INNER JOIN sys.dm_db_index_physical_stats(DB_ID(), OBJECT_ID(@FullTableName), NULL, NULL, 'SAMPLED') IPS
  ON IOS.index_id = IPS.index_id AND IOS.object_id = IPS.object_id AND IPS.alloc_unit_type_desc = 'IN_ROW_DATA'
JOIN SYS.INDEXES I ON IOS.INDEX_ID=I.INDEX_ID AND IOS.OBJECT_ID = I.OBJECT_ID
JOIN SYS.OBJECTS O ON IOS.OBJECT_ID=O.OBJECT_ID
WHERE O.TYPE_DESC='USER_TABLE'
ORDER BY IOS.LEAF_ALLOCATION_COUNT DESC, IOS.index_id

-- Clustered Indexes
SELECT
IOS.INDEX_ID,
I.type_desc,
s.name AS SCHEMA_NAME,
O.NAME AS OBJECT_NAME,
I.NAME AS INDEX_NAME,
I.fill_factor AS Fill_Factor,
IOS.LEAF_ALLOCATION_COUNT AS PAGE_SPLIT_FOR_INDEX,
IOS.NONLEAF_ALLOCATION_COUNT AS PAGE_ALLOCATION_CAUSED_BY_PAGESPLIT
FROM SYS.DM_DB_INDEX_OPERATIONAL_STATS(DB_ID(),NULL,NULL,NULL) IOS
JOIN SYS.INDEXES I ON IOS.INDEX_ID=I.INDEX_ID AND IOS.OBJECT_ID = I.OBJECT_ID
JOIN SYS.OBJECTS O ON IOS.OBJECT_ID=O.OBJECT_ID
INNER JOIN sys.schemas s ON s.schema_id = o.schema_id
WHERE O.TYPE_DESC='USER_TABLE'
and i.type_desc = 'clustered'
--order by o.name
ORDER BY IOS.LEAF_ALLOCATION_COUNT DESC, IOS.index_id


-- All Indexes
SELECT
IOS.INDEX_ID,
I.type_desc,
s.name AS SCHEMA_NAME,
O.NAME AS OBJECT_NAME,
I.NAME AS INDEX_NAME,
I.fill_factor AS Fill_Factor,
IOS.LEAF_ALLOCATION_COUNT AS PAGE_SPLIT_FOR_INDEX,
IOS.NONLEAF_ALLOCATION_COUNT AS PAGE_ALLOCATION_CAUSED_BY_PAGESPLIT
FROM SYS.DM_DB_INDEX_OPERATIONAL_STATS(DB_ID(),NULL,NULL,NULL) IOS
JOIN SYS.INDEXES I ON IOS.INDEX_ID=I.INDEX_ID AND IOS.OBJECT_ID = I.OBJECT_ID
JOIN SYS.OBJECTS O ON IOS.OBJECT_ID=O.OBJECT_ID
INNER JOIN sys.schemas s ON s.schema_id = o.schema_id
WHERE O.TYPE_DESC='USER_TABLE' AND i.type_desc <> 'HEAP'
--order by o.name
ORDER BY IOS.LEAF_ALLOCATION_COUNT DESC, IOS.index_id

--Total Splits by Table
SELECT
s.name AS SCHEMA_NAME,
O.NAME AS OBJECT_NAME,
SUM(IOS.LEAF_ALLOCATION_COUNT) AS PAGE_SPLIT_FOR_INDEX,
SUM(IOS.NONLEAF_ALLOCATION_COUNT) AS PAGE_ALLOCATION_CAUSED_BY_PAGESPLIT
FROM SYS.DM_DB_INDEX_OPERATIONAL_STATS(DB_ID(),NULL,NULL,NULL) IOS
JOIN SYS.INDEXES I ON IOS.INDEX_ID=I.INDEX_ID AND IOS.OBJECT_ID = I.OBJECT_ID
JOIN SYS.OBJECTS O ON IOS.OBJECT_ID=O.OBJECT_ID
INNER JOIN sys.schemas s ON s.schema_id = o.schema_id
WHERE O.TYPE_DESC='USER_TABLE' AND i.type_desc <> 'HEAP'
GROUP BY s.name, o.name
HAVING SUM(IOS.LEAF_ALLOCATION_COUNT) > 0
ORDER BY SUM(IOS.LEAF_ALLOCATION_COUNT) DESC

-- Size / Splits  -- small tables with high splits
;WITH IndexSize AS(
SELECT
s.name AS SchemaName,
OBJECT_NAME(i.OBJECT_ID) AS TableName,
i.name AS IndexName,
i.index_id AS IndexID,
8.0 * SUM(a.used_pages) / 1024 AS IndexSize_MB,
SUM(a.total_pages) AS TotalPages, 
    SUM(a.used_pages) AS UsedPages, 
    (SUM(a.total_pages) - SUM(a.used_pages)) AS UnusedPages,
SUM(p.rows) AS TotalRows
FROM sys.indexes AS i
JOIN sys.partitions AS p ON p.OBJECT_ID = i.OBJECT_ID AND p.index_id = i.index_id
JOIN sys.allocation_units AS a ON a.container_id = p.partition_id
JOIN sys.tables as t ON i.object_id = t.object_id
JOIN sys.schemas as s ON s.schema_id = t.schema_id
WHERE i.index_id > 0
GROUP BY i.OBJECT_ID,i.index_id,i.name,s.name
)
SELECT
IOS.INDEX_ID,
I.type_desc,
s.name AS SCHEMA_NAME,
O.NAME AS OBJECT_NAME,
I.NAME AS INDEX_NAME,
I.fill_factor AS Fill_Factor,
z.IndexSize_MB,
IOS.LEAF_ALLOCATION_COUNT AS PAGE_SPLIT_FOR_INDEX,
IOS.NONLEAF_ALLOCATION_COUNT AS PAGE_ALLOCATION_CAUSED_BY_PAGESPLIT,
z.TotalPages,
z.TotalRows,
z.IndexSize_MB / (IOS.LEAF_ALLOCATION_COUNT)
FROM SYS.DM_DB_INDEX_OPERATIONAL_STATS(DB_ID(),NULL,NULL,NULL) IOS
JOIN SYS.INDEXES I ON IOS.INDEX_ID=I.INDEX_ID AND IOS.OBJECT_ID = I.OBJECT_ID
JOIN SYS.OBJECTS O ON IOS.OBJECT_ID=O.OBJECT_ID 
INNER JOIN sys.schemas s ON s.schema_id = o.schema_id
LEFT JOIN IndexSize z ON z.SchemaName = s.name AND z.TableName = o.name AND z.IndexName = i.name
WHERE O.TYPE_DESC='USER_TABLE'
and i.type_desc <> 'heap'
and IOS.LEAF_ALLOCATION_COUNT > 0
and z.IndexSize_MB > 100
ORDER BY z.IndexSize_MB / (IOS.LEAF_ALLOCATION_COUNT) asc, IOS.index_id


